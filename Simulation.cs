using System.Text;

public class Simulation {
    // Which frames should new clown cars be loaded?
    List<int> LoadOnFrames = new();

    public List<ClownCar> ClownCars = new();
    public int[] Directions;

    public bool OnlyLogResult { get; set; }
    public bool ExportToCSV { get; set; }
    public int Cars { get; set; } = 1;
    public int ExtraLoadFramePosition { get; set; } = 0;

    public int Length = 2000;
    public int Frame = 0;
    int InitX = 0;
    public int X = 0;

    public bool Stop = false;

    StringBuilder CSVContentBuilder = new StringBuilder();

    public Simulation(int initialX, int cars) {
        InitX = initialX;
        Cars = cars;

        Directions = new int[Cars];

        RandDiscard(initialX, "Initial X");
    }

    public void AddCSVRow(int x, uint w, string cause, uint result) {
        CSVContentBuilder.Append($"{x};{w};{cause};{(result == 9999999 ? "N/A" : result)};{Frame};;=BITRSHIFT(INDIRECT(\"B\" & ROW()) * 170, 32) + 10;=MOD(INDIRECT(\"B\" & ROW()), 2)\n");
    }

    public void WriteToCSV() {
        using (StreamWriter sw = new StreamWriter(File.Create("result.csv"))) {
            sw.Write("Generated by Clown car RNG Simulator;;;Result;Initial X;ELFP;Frames;Cars\n");
            string leftright = Directions.Select((d) => d == 0 ? "R" : "L").Aggregate((d1, d2) => d1 + d2);
            sw.Write($";;;{leftright};{InitX};{ExtraLoadFramePosition};{Length};{Cars}\n\n");
            sw.Write($"X;RNG state (w);Call reason;Result;Frame;;Blink timer;Stun direction\n");
            sw.Write(CSVContentBuilder.ToString());
        }
    }


    public void GenerateLoadFrames() {
        LoadOnFrames.Add(1); // Clown cars 1, 2, 3 load immediately
        LoadOnFrames.Add(90); // Clown car 4 loads on frame 90

        int offset = 90;
        for(int i = 0; i < Cars - 4; i++) {
            // Clown cars in the level are 37 1/3 frames of full speed running apart
            // So we offset by 37 and add 1 every 3 loads
            offset += 37;
            if ((i + ExtraLoadFramePosition) % 3 == 0) offset++;
            LoadOnFrames.Add(offset);
        }

        Program.Log($"Load frames: [{LoadOnFrames.Select((f) => f.ToString()).Aggregate((f1, f2) => f1 + ", " + f2)}]", true);
    }

    public void Log(string text) {
        if (OnlyLogResult) return;
        Program.Log($"F{Frame}: {text}");
    }

    /// Generate <count> random numbers and discard them
    public void RandDiscard(int count = 1, string reason = "") {
        for (int i = 0; i < count; i++) {
            X++;
            uint w = RNG.GetRandomNumber(X);
            if (ExportToCSV) AddCSVRow(X, w, reason, 9999999);
        }
    }

    /// Generate new blink timer (rand(170) + 10)
    public uint RandBlinkInterval(int id) {
        X++;
        uint w = RNG.GetRandomNumber(X);
        uint val = 10 + (uint)((float)w/UInt32.MaxValue * 170) >> 32;
        if (ExportToCSV) AddCSVRow(X, w, $"({id}) Blink timer", val);
        Program.Log($"New blink interval generated: {val}", true);
        return val;
    }

    /// Generate stun direction after hitting spike (w_n % 2)
    public uint RandSpikeDirection(int id) {
        X++;
        uint w = RNG.GetRandomNumber(X);
        uint val = w % 2;
        if (ExportToCSV) AddCSVRow(X, w, $"({id}) Stun direction", val);
        Program.Log($"New spike direction generated: {val}", true);
        return val;
    }

    public int[] Start() {
        GenerateLoadFrames();

        if (!OnlyLogResult) Program.Log("=== SIMULATION START ===");
        while (Frame < Length && !Stop) FrameAdvance();
        if (!OnlyLogResult) Program.Log($"=== SIMULATION END ({Frame} frames) ===");

        // Abandon early if first 3 CC don't go RRL
        if (Stop && ClownCars.Count == 3) Program.Log($"First 3 clown cars didn't go the right direction ({ClownCars[0].StunDirection}, {ClownCars[1].StunDirection}, {ClownCars[2].StunDirection}). Abandoning {InitX}X");
        else { 
            string leftright = Directions.Select((d) => d == 0 ? "R" : "L").Aggregate((d1,d2) => d1 + d2);
            Program.Log($"Result (init X {InitX}, ELFP {ExtraLoadFramePosition}): clown cars move {leftright}");
        }

        if (ExportToCSV) WriteToCSV();

        return Directions;
    }

    public void FrameAdvance() {
        Frame++;

        // Clown car update
        for (int i = ClownCars.Count;i > 0;i--) {
            ClownCars.Where((cc) => cc.ID == i).First().Update();
        }

        // Clown car loading
        if (LoadOnFrames.Contains(Frame)) {
            LoadClownCar();
            if (Frame == 1) {
                // Load clown cars 2 and 3 also on frame 1
                LoadClownCar();
                LoadClownCar();
            }
        }

        // No run RNG on frames 1 and 2 out the door
        if (Frame >= 3) RandDiscard(reason: "Player run");

        // Frame 1 door exit RNG
        if (Frame == 1) RandDiscard(reason: "Door exit");
    }

    private void LoadClownCar() {
        Log("Loading a new clown car");
        ClownCar cc = new ClownCar(this);
        ClownCars.Add(cc);
        cc.ID = ClownCars.Count;
        if (cc.ID <= 3) cc.HasUniqueDeloadTime = true;
        RandDiscard(3, $"({cc.ID}) Clown car load"); // Clown car 3X
        cc.BlinkInterval = RandBlinkInterval(cc.ID);
    }
}